{
    "drive_motor_imports": "import com.ctre.phoenix6.hardware.TalonFX;\nimport com.ctre.phoenix6.signals.NeutralModeValue;\nimport com.ctre.phoenix6.configs.TalonFXConfiguration;\nimport com.ctre.phoenix6.controls.DutyCycleOut;\nimport com.ctre.phoenix6.controls.VelocityVoltage;\nimport edu.wpi.first.math.controller.SimpleMotorFeedforward;",
    "drive_motor_variables": "    TalonFX driveMotor;\n    private final SimpleMotorFeedforward driveFeedForward = new SimpleMotorFeedforward(Constants.SwerveConstants.drivekS, Constants.SwerveConstants.drivekV, Constants.SwerveConstants.drivekA);\n    private final DutyCycleOut driveDutyCycle = new DutyCycleOut(0);\n    private final VelocityVoltage driveVelocity = new VelocityVoltage(0);",
    "drive_motor_initialize": "        driveMotor = new TalonFX(constants.driveMotorCanID);\n\n        TalonFXConfiguration swerveDriveFXConfig = new TalonFXConfiguration();\n\n        swerveDriveFXConfig.MotorOutput.NeutralMode = NeutralModeValue.Brake;\n\n        swerveDriveFXConfig.Feedback.SensorToMechanismRatio = Constants.SwerveConstants.driveRatio;\n\n        swerveDriveFXConfig.CurrentLimits.SupplyCurrentLimitEnable = true;\n        swerveDriveFXConfig.CurrentLimits.SupplyCurrentLimit = Constants.SwerveConstants.driveCurrentLimit;\n        swerveDriveFXConfig.CurrentLimits.StatorCurrentLimitEnable = true;\n        swerveDriveFXConfig.CurrentLimits.StatorCurrentLimit = Constants.SwerveConstants.driveCurrentLimit;\n\n        swerveDriveFXConfig.Slot0.kP = Constants.SwerveConstants.drivekP;\n        swerveDriveFXConfig.Slot0.kD = Constants.SwerveConstants.drivekD;\n\n        driveMotor.getConfigurator().apply(swerveDriveFXConfig);",
    "drive_motor_setspeed": "        if(useOpenLoop){\n            driveDutyCycle.Output = state.speedMetersPerSecond / Constants.SwerveConstants.maxSpeed;\n            driveMotor.setControl(driveDutyCycle);\n        }\n        else {\n            driveVelocity.Velocity = state.speedMetersPerSecond / Constants.SwerveConstants.wheelCircumference;\n            driveVelocity.FeedForward = driveFeedForward.calculate(state.speedMetersPerSecond);\n            driveMotor.setControl(driveVelocity);\n        }",
    "drive_motor_getwheelposition": "        return driveMotor.getPosition().getValueAsDouble() * Constants.SwerveConstants.wheelCircumference;",
    "drive_motor_getwheelvelocity": "        return driveMotor.getVelocity().getValueAsDouble() * Constants.SwerveConstants.wheelCircumference;"
}