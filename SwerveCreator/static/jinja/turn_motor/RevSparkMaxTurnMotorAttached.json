{
    "turn_motor_imports": "import com.revrobotics.spark.SparkMax;\nimport com.revrobotics.spark.SparkBase.ControlType;\nimport com.revrobotics.spark.SparkBase.PersistMode;\nimport com.revrobotics.spark.SparkBase.ResetMode;\nimport com.revrobotics.spark.SparkLowLevel.MotorType;\nimport com.revrobotics.spark.config.SparkMaxConfig;\nimport com.revrobotics.spark.config.ClosedLoopConfig.FeedbackSensor;\nimport com.revrobotics.spark.config.SparkBaseConfig.IdleMode;",
    "turn_motor_variables": "    SparkMax turnMotor;",
    "turn_motor_initialize": "        turnMotor = new SparkMax(constants.turnMotorCanID, MotorType.kBrushless);\n\n        SparkMaxConfig turnConfig = new SparkMaxConfig();\n        turnConfig.idleMode(IdleMode.kBrake);\n        turnConfig.smartCurrentLimit((int)Constants.SwerveConstants.turnCurrentLimit);\n\n        turnConfig.encoder.positionConversionFactor(1.0);\n        turnConfig.encoder.velocityConversionFactor(1.0);\n\n        turnConfig.closedLoop.feedbackSensor(FeedbackSensor.kAbsoluteEncoder);\n        turnConfig.closedLoop.pid(Constants.SwerveConstants.turnkP, 0, Constants.SwerveConstants.turnkD);\n        turnConfig.closedLoop.outputRange(-1.0, 1.0);\n        turnConfig.closedLoop.positionWrappingEnabled(true);\n        turnConfig.closedLoop.positionWrappingInputRange(0, 1.0);\n\n        turnMotor.configure(turnConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);",
    "turn_motor_setrotation": "        turnMotor.getClosedLoopController().setReference(state.angle.getRotations(), ControlType.kPosition);",
    "turn_motor_getrotation": "        return Rotation2d.fromRotations(turnMotor.getAbsoluteEncoder().getPosition());",
    "turn_motor_resynchronizeturnencoder": "        turnMotor.getEncoder().setPosition(angle.getRotations());"
}